{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/TodoList/TodoList.tsx","tools/getFilteredTodos.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","ALL","ACTIVE","COMPLETED","value","QUERY","defaultState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","useEffect","getTodosFromServer","a","response","visibleTodos","useMemo","selectedStatus","preparedTitle","title","replace","toLowerCase","preparedQuery","isAppropriateTodo","includes","completed","getFilteredTodos","length","className","map","id","onClick","selectTtodo","selectTodo","TodoFilter","memo","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","getUserFromServer","userId","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcec8db9.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  QUERY = 'currentFilter/QUERY',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype AllStatusAction = { type: Status.ALL };\ntype ActiveStatusAction = { type: Status.ACTIVE };\ntype CompletedStatusAction = { type: Status.COMPLETED };\ntype QueryTodoAction = { type: Status.QUERY, payload: string };\n\nconst allTodos = (): AllStatusAction => ({ type: Status.ALL });\nconst activeTodos = (): ActiveStatusAction => ({\n  type: Status.ACTIVE,\n});\nconst completedTodos = (): CompletedStatusAction => ({\n  type: Status.COMPLETED,\n});\nconst queryFilter = (value: string): QueryTodoAction => ({\n  type: Status.QUERY,\n  payload: value,\n});\n\nexport const actions = {\n  allTodos,\n  activeTodos,\n  completedTodos,\n  queryFilter,\n};\n\ntype State = {\n  query: string,\n  status: Status\n};\n\ntype Action = AllStatusAction\n| ActiveStatusAction\n| CompletedStatusAction\n| QueryTodoAction;\n\nconst defaultState = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterReducer = (state: State = defaultState, action: Action): State => {\n  switch (action.type) {\n    case Status.ACTIVE:\n      return {\n        ...state,\n        status: Status.ACTIVE,\n      };\n\n    case Status.ALL:\n      return {\n        ...state,\n        status: Status.ALL,\n      };\n\n    case Status.COMPLETED:\n      return {\n        ...state,\n        status: Status.COMPLETED,\n      };\n\n    case Status.QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype GetTodoAction = {\n  type: 'currentTodos/GET';\n  payload: Todo[];\n};\n\nconst getTodos = (todos: Todo[]): GetTodoAction => ({\n  type: 'currentTodos/GET',\n  payload: todos,\n});\n\nexport const actions = { getTodos };\ntype State = Todo[] | [];\n\nconst todosReducer = (state: State = [], action: GetTodoAction): Todo[] => {\n  switch (action.type) {\n    case 'currentTodos/GET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo } from 'react';\nimport { getTodos } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/todos';\nimport { actions as selectTtodo } from '../../features/currentTodo';\nimport { getFilteredTodos } from '../../tools/getFilteredTodos';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const { status, query } = useAppSelector(state => state.filter);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const getTodosFromServer = async () => {\n      const response = await getTodos();\n\n      dispatch(actions.getTodos(response));\n    };\n\n    getTodosFromServer();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return getFilteredTodos(todos, query, status);\n  }, [todos, status, query]);\n\n  const selectTodo = (todo: Todo) => {\n    return dispatch(selectTtodo.setTodo(todo));\n  };\n\n  return (\n    <>\n      {(!visibleTodos.length && query) && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {!!todos.length && visibleTodos.map(todo => (\n            <tr\n              key={todo.id}\n              data-cy=\"todo\"\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed\n                  ? (\n                    <span\n                      className=\"icon\"\n                      data-cy=\"iconCompleted\"\n                    >\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )\n                  : ''}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => selectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={`far ${selectedTodo\n                        ? 'fa-eye-slash'\n                        : 'fa-eye'}`}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  query: string,\n  status: Status,\n) => {\n  return todos.filter(todo => {\n    let selectedStatus = true;\n\n    const preparedTitle = todo.title\n      .replace(/ /g, '')\n      .toLowerCase();\n    const preparedQuery = query\n      .replace(/ /g, '')\n      .toLowerCase();\n\n    const isAppropriateTodo = preparedTitle.includes(preparedQuery);\n\n    switch (status) {\n      case Status.ACTIVE:\n        selectedStatus = !todo.completed;\n        break;\n\n      case Status.COMPLETED:\n        selectedStatus = todo.completed;\n        break;\n\n      default:\n        break;\n    }\n\n    return isAppropriateTodo && selectedStatus;\n  });\n};\n","import React, { memo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = memo(\n  () => {\n    const { query, status } = useAppSelector(state => state.filter);\n    const dispatch = useAppDispatch();\n\n    const handleStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n      const { value } = event.target;\n\n      switch (value) {\n        case Status.ALL:\n          dispatch(actions.allTodos());\n          break;\n\n        case Status.ACTIVE:\n          dispatch(actions.activeTodos());\n          break;\n\n        case Status.COMPLETED:\n          dispatch(actions.completedTodos());\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const { value } = event.target;\n\n      dispatch(actions.queryFilter(value));\n    };\n\n    const resetQuery = () => {\n      dispatch(actions.queryFilter(''));\n    };\n\n    return (\n      <form\n        className=\"field has-addons\"\n        onSubmit={event => event.preventDefault()}\n      >\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              onChange={handleStatus}\n              value={status}\n            >\n              <option value={Status.ALL}>All</option>\n              <option value={Status.ACTIVE}>Active</option>\n              <option value={Status.COMPLETED}>Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            value={query}\n            onChange={handleQuery}\n            className=\"input\"\n            placeholder=\"Search...\"\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          {!!query.length && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={resetQuery}\n              />\n            </span>\n          )}\n        </p>\n      </form>\n    );\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedTodo: Todo;\n}\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      const response = await getUser(selectedTodo.userId);\n\n      setUser(response);\n    };\n\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(actions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p\n                className=\"block\"\n                data-cy=\"modal-title\"\n              >\n                {selectedTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length && <Loader />}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal selectedTodo={selectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}